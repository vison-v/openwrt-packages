#!/bin/sh /etc/rc.common

START=99

CONFIG="luci-app-ipsec-server"
IPSEC_SECRETS_FILE=/etc/ipsec.secrets
IPSEC_CONN_FILE=/etc/ipsec.conf
CHAP_SECRETS=/etc/ppp/chap-secrets
L2TP_PATH=/var/etc/xl2tpd
L2TP_CONFIG_FILE=${L2TP_PATH}/xl2tpd.conf
L2TP_OPTIONS_FILE=${L2TP_PATH}/options.xl2tpd

vt_clientip=$(uci -q get $CONFIG.@service[0].clientip)
vt_l2tp_enabled=$(uci -q get $CONFIG.@service[0].l2tp_enable)
vt_l2tp_localip=$(uci -q get $CONFIG.@service[0].l2tp_localip)

get_enabled_anonymous_secs() {
	uci -q show "${CONFIG}" | grep "${1}\[.*\.enabled='1'" | cut -d '.' -sf2
}

ipt_rule() {
	local action="D"
	[ "$1" = "add" ] && action="I"
	iptables -t nat -${action} POSTROUTING -s ${vt_clientip%.*}.0/24 -m comment --comment "IPSec VPN Server" -j MASQUERADE 2>/dev/null
	iptables -${action} forwarding_rule -s ${vt_clientip%.*}.0/24 -m comment --comment "IPSec VPN Server" -j ACCEPT 2>/dev/null
	iptables -${action} forwarding_rule -m policy --dir in --pol ipsec --proto esp -m comment --comment "IPSec VPN Server" -j ACCEPT 2>/dev/null
	iptables -${action} forwarding_rule -m policy --dir out --pol ipsec --proto esp -m comment --comment "IPSec VPN Server" -j ACCEPT 2>/dev/null
	iptables -${action} INPUT -p udp -m multiport --dports 500,4500 -m comment --comment "IPSec VPN Server" -j ACCEPT 2>/dev/null
	[ "$vt_l2tp_enabled" = 1 ] && {
		iptables -t nat -${action} POSTROUTING -s ${vt_l2tp_localip%.*}.0/24 -m comment --comment "IPSec VPN Server" -j MASQUERADE 2>/dev/null
		iptables -${action} forwarding_rule -s ${vt_l2tp_localip%.*}.0/24 -m comment --comment "IPSec VPN Server" -j ACCEPT 2>/dev/null
		iptables -${action} INPUT -p udp --dport 1701 -m comment --comment "IPSec VPN Server" -j ACCEPT 2>/dev/null
	}
}

gen_include() {
	echo '#!/bin/sh' > /var/etc/ipsecvpn.include
	extract_rules() {
		echo "*$1"
		iptables-save -t $1 | grep "IPSec VPN Server" | \
		sed -e "s/^-A \(INPUT\)/-I \1 1/"
		echo 'COMMIT'
	}
	cat <<-EOF >> /var/etc/ipsecvpn.include
		iptables-save -c | grep -v "IPSec VPN Server" | iptables-restore -c
		iptables-restore -n <<-EOT
		$(extract_rules filter)
		$(extract_rules nat)
		EOT
	EOF
	return 0
}

start() {
	local vt_enabled=$(uci -q get $CONFIG.@service[0].enabled)
	[ "$vt_enabled" = 0 ] && return 1
	
	local vt_clientip=$(uci -q get $CONFIG.@service[0].clientip)
	local vt_clientdns=$(uci -q get $CONFIG.@service[0].clientdns)
	[ -z "$vt_clientdns" ] && local vt_clientdns="8.8.4.4"
	local vt_secret=$(uci -q get $CONFIG.@service[0].secret)
	
	local vt_l2tp_enabled=$(uci -q get $CONFIG.@service[0].l2tp_enable)
	[ "$vt_l2tp_enabled" = 1 ] && {
		touch $CHAP_SECRETS
		local vt_remoteip=$(uci -q get $CONFIG.@service[0].l2tp_remoteip)
		local ipsec_l2tp_config=$(cat <<-EOF
		#######################################
		# L2TP Connections
		#######################################

		conn L2TP-IKEv1-PSK
		  type=transport
		  keyexchange=ikev1
		  authby=secret
		  leftprotoport=udp/l2tp
		  left=%any
		  right=%any
		  rekey=no
		  forceencaps=yes
		  ike=aes128-sha1-modp2048,aes128-sha1-modp1024,3des-sha1-modp1024,3des-sha1-modp1536
		  esp=aes128-sha1,3des-sha1
		EOF
		)
		
		mkdir -p $L2TP_PATH
		cat > $L2TP_OPTIONS_FILE <<-EOF
			name "l2tp-server"
			ipcp-accept-local
			ipcp-accept-remote
			ms-dns ${vt_l2tp_localip}
			noccp
			auth
			idle 1800
			mtu 1400
			mru 1400
			lcp-echo-failure 10
			lcp-echo-interval 60
			connect-delay 5000
		EOF
		cat > $L2TP_CONFIG_FILE <<-EOF
			[global]
			port = 1701
			debug avp = yes
			debug network = yes
			debug state = yes
			debug tunnel = yes
			[lns default]
			ip range = ${vt_remoteip}
			local ip = ${vt_l2tp_localip}
			require chap = yes
			refuse pap = yes
			require authentication = no
			name = l2tp-server
			;ppp debug = yes
			pppoptfile = ${L2TP_OPTIONS_FILE}
			length bit = yes
		EOF

		xl2tpd -c $L2TP_CONFIG_FILE >/dev/null 2>&1 &
	}
	
	cat > $IPSEC_CONN_FILE <<-EOF
		# ipsec.conf - strongSwan IPsec configuration file

		config setup
		  uniqueids=no
		  charondebug="cfg 2, dmn 2, ike 2, net 0"

		conn %default
		  dpdaction=clear
		  dpddelay=300s
		  rekey=no
		  left=%defaultroute
		  leftfirewall=yes
		  right=%any
		  ikelifetime=60m
		  keylife=20m
		  rekeymargin=3m
		  keyingtries=1
		  auto=add
		  
		#######################################
		# Default non L2TP Connections
		#######################################

		conn Non-L2TP
		  leftsubnet=0.0.0.0/0
		  rightsubnet=${vt_clientip}
		  rightsourceip=${vt_clientip}
		  rightdns=${vt_clientdns}
		  ike=aes128-sha1-modp2048,aes128-sha1-modp1024,3des-sha1-modp1024,3des-sha1-modp1536
		  esp=aes128-sha1,3des-sha1

		#######################################
		# EAP Connections
		#######################################

		# This detects a supported EAP method
		conn IKEv2-EAP
		  also=Non-L2TP
		  keyexchange=ikev2
		  eap_identity=%any
		  rightauth=eap-dynamic

		#######################################
		# PSK Connections
		#######################################

		conn IKEv2-PSK
		  also=Non-L2TP
		  keyexchange=ikev2
		  authby=secret

		# Cisco IPSec
		conn IKEv1-PSK-XAuth
		  also=Non-L2TP
		  keyexchange=ikev1
		  leftauth=psk
		  rightauth=psk
		  rightauth2=xauth

		$ipsec_l2tp_config
	EOF

	cat > /etc/ipsec.secrets <<-EOF
	# /etc/ipsec.secrets - strongSwan IPsec secrets file
	: PSK "$vt_secret"
	EOF
	
	local users=$(get_enabled_anonymous_secs "@users")
	[ -n "$users" ] && {
		for user in $users; do
			eval $(uci -q show "${CONFIG}.${user}" | cut -d'.' -sf 3-)
			[ "$enabled" -eq 0 ] && return 0
			[ -n "$username" ] || return 0
			[ -n "$password" ] || return 0
			echo "$username : EAP '$password'" >> $IPSEC_SECRETS_FILE
			echo "$username : XAUTH '$password'" >> $IPSEC_SECRETS_FILE
			[ "$vt_l2tp_enabled" = 1 ] && echo "$username l2tp-server $password *" >> $CHAP_SECRETS
		done
	}
	
	ipt_rule add
	
	/usr/lib/ipsec/starter --daemon charon --nofork > /dev/null 2>&1 &
	gen_include
}

stop() {
	sed -i '/l2tp-server/d' $CHAP_SECRETS 2>/dev/null
	ps -w | grep "$L2TP_PATH" | grep -v "grep" | awk '{print $1}' | xargs kill -9 >/dev/null 2>&1
	rm -rf $L2TP_PATH
	ps -w | grep "/usr/lib/ipsec" | grep -v "grep" | awk '{print $1}' | xargs kill -9 >/dev/null 2>&1
	ipt_rule del
	rm -rf /var/etc/ipsecvpn.include
}